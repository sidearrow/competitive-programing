class UnionFind:
    def __init__(self, n):
        self.par = [-1] * n
        self.size = [1] * n

    def get_root(self, x):
        if self.par[x] == -1:
            return x
        self.par[x] = self.get_root(self.par[x])
        return self.par[x]

    def unite(self, x, y):
        rx, ry = self.get_root(x), self.get_root(y)
        if rx == ry:
            return
        if self.size[ry] > self.size[rx]:
            rx, ry = ry, rx
        self.par[ry] = rx
        self.size[rx] += self.size[ry]


N = int(input())
A = [int(v) for v in input().split()]
uf = UnionFind(2 * 10 ** 5 + 1)
for i in range(N // 2):
    a, b = A[i], A[N - i - 1]
    if a != b:
        uf.unite(a, b)
ans = 0
for i in range(2 * 10 ** 5 + 1):
    if uf.par[i] == -1:
        ans += uf.size[i] - 1
print(ans)
